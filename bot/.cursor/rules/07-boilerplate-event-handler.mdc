---
description: MANDATORY BLUEPRINT for creating new Discord event handlers. Follow this structure to ensure correct registration with the EventManager.
globs: 
alwaysApply: false
---
# The Event Handler Creation Blueprint

## When to Use This Rule
*   When you need to listen and react to a new `discord.js` client event (e.g., `guildMemberAdd`, `messageDelete`).

## Core Principles
1.  All event handlers MUST extend the `DiscordEvent` class from `@Structures/discord-events`.
2.  The `eventName` in the constructor MUST be a valid key of `ClientEvents` from `discord.js`.
3.  The `run` method's parameters MUST exactly match the parameters for that event in `discord.js`.

## Mandatory Event Handler Blueprint
This template shows a handler for the `messageCreate` event. Adapt the `eventName` and `run` signature for other events.

```typescript
// src/events/new-event.ts

// 1. Import necessary modules
import { DiscordEvent } from "@Structures/discord-events";
import { type Message, ChannelType } from "discord.js"; // Import types for the event args
import ChatBotManager from "@Managers/chat-bot-manager"; // Example manager usage

// 2. Define the Event class
// The generic <"messageCreate"> sets the event name and types the `run` method's arguments.
export default class MessageCreateEvent extends DiscordEvent<"messageCreate"> {
	constructor() {
		super({
			eventName: "messageCreate",
			eventType: "on", // Use "on" for recurring events, "once" for one-time events.
		});
	}

	// 3. Implement the execution logic
	// The parameters (`message`) are automatically typed from the generic above.
	async run(message: Message) {
		// Ignore bots to prevent loops
		if (message.author.bot) return;

		// Example logic: handle messages in chatbot threads
		const isThread = message.channel.type === ChannelType.PrivateThread;
		if (isThread) {
			// Use a manager to handle the logic
			const chatBot = await ChatBotManager.getChatBot(message.channel);
			if (!chatBot) return;
			await chatBot.processMessage(message);
		}
	}
}
