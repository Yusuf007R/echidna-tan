---
description: Rules and blueprints for using interactive Discord message components like buttons and string selects via the project's custom wrapper classes.
globs: 
alwaysApply: false
---
# Discord Component Usage

## Core Principle
The project uses custom wrappers (`ButtonComponent`, `StringSelectComponent`) around `discord.js` builders to simplify handling interactions. You MUST use these wrappers to create and manage components.

## Blueprint: Using a String Select Menu

This example demonstrates creating a select menu, sending it, and handling the user's selection. The same pattern applies to `ButtonComponent`.

```typescript
// Inside a command's `run` method
import StringSelectComponent from "@Components/string-select";
import { ActionRowBuilder, type StringSelectMenuBuilder } from "@discordjs/builders";
import type { StringSelectMenuInteraction } from "discord.js";

// ... inside async run(interaction: CommandInteraction)

const searchResult = [{ name: "Track 1", id: "t1" }, { name: "Track 2", id: "t2" }];
const customId = `${interaction.id}-music-select`; // Create a unique ID

// 1. Instantiate the component wrapper
const stringSelect = new StringSelectComponent({
    interaction, // Pass the initial interaction
    custom_id: customId,
    placeholder: "Select a song to play",
    options: searchResult.map((item) => ({
        label: item.name,
        value: item.id,
    })),
})
// 2. Chain the onFilter method to ensure the correct interaction is caught
.onFilter((inter) => {
    // This ensures we only process the interaction with our unique custom ID
    // from the user who initiated the command.
    return StringSelectComponent.filterByCustomID(inter, customId) &&
           StringSelectComponent.filterByUser(inter, interaction);
})
// 3. Chain the onAction method to define what happens when the user selects an option
.onAction(async (selectInteraction: StringSelectMenuInteraction) => {
    // The interaction is already acknowledged. Use `editReply` or `followUp`.
    const selectedValue = selectInteraction.values[0];
    await selectInteraction.editReply({ 
        content: `You selected track with ID: ${selectedValue}`,
        components: [] // Remove the select menu after selection
    });
})
// 4. Chain the onError method to handle timeouts
.onError(async (reason) => {
    console.error("Select menu timed out:", reason);
    await interaction.editReply({ 
        content: "You did not make a selection in time.",
        components: [] 
    });
})
// 5. Build the component
.build();

// 6. Add the component to an ActionRow and send it
const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(stringSelect);

await interaction.editReply({
    content: "Please choose from the list below:",
    components: [row],
});
