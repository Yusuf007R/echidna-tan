---
description: The single source of truth for all database operations. Governs schema definition, Drizzle ORM usage, and query construction. Adherence is mandatory.
globs: 
alwaysApply: false
---
# Database and Schema Rules

## Core Principle
The project uses Drizzle ORM with a Turso/libsql database. All database interactions MUST go through the central `db` instance and adhere to the schemas defined in `src/drizzle/schema.ts`.

### 1. Accessing the Database

✅ **CORRECT: Import the shared `db` instance.**
All files that need to query the database MUST import the singleton instance from `src/drizzle/index.ts`.

```typescript
import db from "src/drizzle";
import { userTable } from "src/drizzle/schema";
import { eq } from "drizzle-orm";

const user = await db.query.userTable.findFirst({
  where: eq(userTable.id, "some-user-id"),
});
```

❌ **FORBIDDEN: Creating a new database client.**
Never create a new client using `createClient` or `drizzle()`. This bypasses the application's configured connection and schema.

```typescript
import { createClient } from "@libsql/client";
import { drizzle } from "drizzle-orm/libsql";

// ❌ WRONG! DO NOT DO THIS!
const turso = createClient({ /* ... */ });
const newDb = drizzle(turso);
```

### 2. Modifying the Schema
All schema definitions reside exclusively in `src/drizzle/schema.ts`.
*   **Reusability:** Use the `baseDates` object for `createdAt` and `updatedAt` timestamps in new tables.
*   **Custom Types:** Use the pre-defined custom types for special data:
    *   `float32Array`: For vector embeddings. You MUST specify `dimensions`.
    *   `arrayJson`: For storing arrays of strings.
*   **Relations:** After defining a new table, you MUST define its relations using Drizzle's `relations` helper. This is critical for the query builder.

✅ **CORRECT: Example of a new table definition in `src/drizzle/schema.ts`**
```typescript
// In src/drizzle/schema.ts

// ... other tables

export const newTable = sqliteTable("new_table", {
	id: integer("id").primaryKey({ autoIncrement: true }),
    content: text("content").notNull(),
    userId: text("user_id").notNull().references(() => userTable.id),
	...baseDates, // Use the shared timestamp fields
});

export const newTableRelations = relations(newTable, ({ one }) => ({
	user: one(userTable, { // Define the relation to the user table
		fields: [newTable.userId],
		references: [userTable.id],
	}),
}));
```

### 3. Writing Queries
*   **Query Builder:** Always prefer the Drizzle query builder (`db.query.*`) for selects.
*   **DML:** Use `db.insert()`, `db.update()`, and `db.delete()` for data manipulation.
*   **Operators:** Import operators like `eq`, `and`, `inArray` directly from `drizzle-orm`.
