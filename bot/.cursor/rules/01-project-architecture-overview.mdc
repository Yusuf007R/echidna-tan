---
description: 
globs: 
alwaysApply: true
---
# Project Architecture Overview

## When to Use This Rule
*   When you are new to the project and need a conceptual map.
*   When you are unsure where a new file or feature should be located.

## Core Technologies
*   **Language:** TypeScript
*   **Discord Bot Framework:** `discord.js` v14
*   **API Framework:** `hono`
*   **Database ORM:** `drizzle-orm` with `turso` (libsql)
*   **AI Service Integration:** `openrouter.ai`
*   **Environment:** `Node.js`

## Key Directory Structure

*   `src/index.ts`: Main application entry point. Initializes the `EchidnaClient`.
*   `src/api/`: All code related to the Hono web server.
    *   `routers/`: Contains individual route files.
    *   `middlewares/`: Contains Hono middleware.
*   `src/ai-stuff/`: Houses all logic for AI features.
    *   `structures/`: Core AI classes like `ChatBot` and `MemoriesManager`.
    *   `templates/`: Defines AI personalities and system prompts.
    *   `tools/`: Defines tools AI agents can use, like `EchidnaSelfieTool`.
*   `src/commands/`: Location for all Discord slash commands. Each subdirectory is a command category.
*   `src/context-menu/`: Location for all Discord context menu commands.
*   `src/drizzle/`: Database configuration.
    *   `schema.ts`: The **single source of truth** for all database tables.
    *   `index.ts`: The `db` client instance export.
*   `src/events/`: Contains all `discord.js` event handlers.
*   `src/event-validators/`: A custom system for pre-validating command execution (e.g., `IsAdmin`, `GuildOnly`).
*   `src/managers/`: Singleton classes that manage global state or systems (e.g., `InteractionManager`, `ChatBotManager`).
*   `src/structures/`: Core application classes and abstractions.
    *   `echidna-client.ts`: The main `Client` extension.
    *   `command.ts`: The base class all slash commands MUST extend.
    *   `context-menu.ts`: The base class all context menus MUST extend.
    *   `discord-events.ts`: The base class all event handlers MUST extend.
*   `src/utils/`: Standalone, reusable utility functions.
