---
description: The definitive guide for creating and modifying API endpoints using Hono. Covers routing, middleware, and request/response handling.
globs: 
alwaysApply: false
---
# API Development with Hono

## Core Principle
The API is built using Hono. All new routes MUST be defined in a separate file within `src/api/routers/` and then registered in `src/api/index.ts`.

## Creating a New Router
1.  Create a new file, e.g., `src/api/routers/newFeature.ts`.
2.  Follow the blueprint below.

### Blueprint: New Router File
```typescript
// src/api/routers/newFeature.ts
import type { HonoEnv } from "@Api/index";
import authMiddleware from "@Api/middlewares/auth-middleware";
import guildMiddleware from "@Api/middlewares/guild-middleware";
import { Hono } from "hono";

const newFeatureRouter = new Hono<HonoEnv>()
	// Apply authentication middleware to all routes in this file
	.use(authMiddleware) 
	// Define a GET endpoint
	.get("/data", (c) => {
		const user = c.get("user"); // Access user from authMiddleware
		return c.json({ message: `Hello, ${user.displayName}` });
	})
    // Define a POST endpoint that requires a guild context
    .post(
        "/guild-action",
        guildMiddleware({ fetchMusicQueue: false }), // Apply guild middleware
        (c) => {
            const guild = c.get("guild");
            // ... do something with the guild
            return c.json({ success: true, guildId: guild.id });
        }
    );

export default newFeatureRouter;
```
### Registering the Router
After creating the router file, you MUST register it in `src/api/index.ts`.

âœ… **CORRECT: Registering the new route in `src/api/index.ts`**
```typescript
// In src/api/index.ts
// ... other imports
import newFeatureRouter from "./routers/newFeature"; // 1. Import the new router

const app = new Hono<HonoEnv>()
    // ... .use() calls
    .route("/user", userRouter)
	.route("/auth", authRouter)
	.route("/music", musicPlayerRouter)
	.route("/guild", guildRouter)
    .route("/new-feature", newFeatureRouter); // 2. Register it with a base path

// ... rest of the file
```

## Middleware Usage
*   `authMiddleware`: Use this to protect routes that require a logged-in user. It populates `c.get("user")` and `c.get("session")`.
*   `guildMiddleware`: Use this for routes that operate on a specific Discord guild. It requires the `X-Guild-Id` header to be present and populates `c.get("guild")`. You can also configure it to fetch the music queue.
