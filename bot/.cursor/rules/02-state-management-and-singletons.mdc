---
description: Definitive rules for interacting with singleton Managers and the core EchidnaClient. MANDATORY for ensuring application stability and preventing state corruption.
globs: 
alwaysApply: false
---
# State Management and Singletons

## Core Principle
The project uses a Singleton pattern for all managers and the core `EchidnaClient` to provide a single, consistent state and access point for major systems. You MUST NOT instantiate these classes directly.

## Accessing Core Systems

✅ **CORRECT: Accessing managers and the client via the `EchidnaSingleton` base class.**
Every `Command`, `ContextMenu`, `DiscordEvent`, and most other core structures extend `EchidnaSingleton`. This provides direct access to the client instance via `this.echidna`.

```typescript
// Inside any class that extends EchidnaSingleton (e.g., a Command)
import { Command } from "@Structures/command";

export default class MyCommand extends Command {
  // ...
  async run(interaction) {
    // Correctly access managers via the inherited `this.echidna` property
    const user = await this.echidna.guildsManager.getGuilds();
    const commandCount = this.echidna.interactionManager.commandsCount;
  }
}
```

❌ **FORBIDDEN: Instantiating manager classes directly.**
This will create a new, isolated instance and break the application's state.

```typescript
// This is an anti-pattern and will cause severe issues.
import InteractionManager from "@Managers/interaction-manager";

// ❌ WRONG! DO NOT DO THIS!
const newManager = new InteractionManager(); 
// This `newManager` has no commands loaded and is disconnected from the client.
```

## Available Singleton Managers

You can access the following managers via `this.echidna.*`:
*   `this.echidna.musicPlayer`: Manages all music playbook functionality.
*   `this.echidna.ticTacToeManager`: Manages active Tic-Tac-Toe games.
*   `this.echidna.eventManager`: Manages loading and listening to Discord events.
*   `this.echidna.guildsManager`: Manages fetching and caching of guild data.
*   `this.echidna.interactionManager`: Manages loading and handling of all commands and context menus.
*   `this.echidna.modalManager`: Manages modal submissions and responses.
